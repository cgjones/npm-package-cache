{"_id":"filer","_rev":"115-70359e6a4c210e61b3c587aa11becc65","name":"filer","description":"Node-like file system for browsers","dist-tags":{"latest":"0.0.44"},"versions":{"0.0.1":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.1","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"devDependencies":{"grunt":"~0.4.0","grunt-contrib-clean":"~0.4.0","grunt-contrib-requirejs":"~0.4.0","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-contrib-compress":"~0.4.1","grunt-contrib-connect":"~0.1.2","grunt-contrib-jasmine":"~0.3.3","grunt-contrib-concat":"~0.1.3","grunt-contrib-jshint":"~0.7.1"},"contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"}],"_id":"filer@0.0.1","dist":{"shasum":"79f229b59101fd953d45c272c6ab162bf1486855","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.1.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"modeswitch","email":"ack+npm@modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.2":{"name":"filer","version":"0.0.2","devDependencies":{"grunt":"~0.4.0","grunt-contrib-clean":"~0.4.0","grunt-contrib-requirejs":"~0.4.0","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-contrib-compress":"~0.4.1","grunt-contrib-connect":"~0.1.2","grunt-contrib-jasmine":"~0.3.3","grunt-contrib-concat":"~0.1.3","grunt-contrib-jshint":"~0.7.1"},"contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"}],"description":"[![NPM](https://nodei.co/npm/filer.png?stars=true)](https://nodei.co/npm/filer/)","_id":"filer@0.0.2","dist":{"shasum":"3e9f4d0622da050721eaa33f834d23ad4c302389","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.2.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"modeswitch","email":"ack+npm@modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.3":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.3","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"devDependencies":{"grunt":"~0.4.0","grunt-contrib-clean":"~0.4.0","grunt-contrib-requirejs":"~0.4.0","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-contrib-compress":"~0.4.1","grunt-contrib-connect":"~0.1.2","grunt-contrib-jasmine":"~0.3.3","grunt-contrib-concat":"~0.1.3","grunt-contrib-jshint":"~0.7.1"},"contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"}],"_id":"filer@0.0.3","dist":{"shasum":"dec63b53f6baca7af32bcced2ae623f224cd637f","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.3.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"modeswitch","email":"ack+npm@modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.5":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.5","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"devDependencies":{"bower":"~1.0.0","grunt":"~0.4.0","grunt-contrib-clean":"~0.4.0","grunt-contrib-requirejs":"~0.4.0","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-contrib-compress":"~0.4.1","grunt-contrib-connect":"~0.1.2","grunt-contrib-concat":"~0.1.3","grunt-contrib-jshint":"~0.7.1","grunt-mocha":"0.4.10"},"contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"}],"_id":"filer@0.0.5","dist":{"shasum":"7baeda1f7b50f364bcb8e944b8bb3394aab0bd3c","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.5.tgz"},"_from":".","_npmVersion":"1.3.24","_npmUser":{"name":"modeswitch","email":"ack+npm@modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.6":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.6","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"dependencies":{"bower":"~1.0.0"},"devDependencies":{"grunt":"~0.4.0","grunt-contrib-clean":"~0.4.0","grunt-contrib-requirejs":"~0.4.0","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-contrib-compress":"~0.4.1","grunt-contrib-connect":"~0.1.2","grunt-contrib-concat":"~0.1.3","grunt-contrib-jshint":"~0.7.1","grunt-mocha":"0.4.10"},"contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"}],"_id":"filer@0.0.6","dist":{"shasum":"a28011019bc54ab27f62b1deafca1d8aaeccacc6","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.6.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"modeswitch","email":"ack+npm@modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.7":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.7","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"dependencies":{"bower":"~1.0.0","request":"^2.36.0"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"}],"_id":"filer@0.0.7","_shasum":"afc463e80d030ccc70f0a41b7a1fad64329409a7","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"dist":{"shasum":"afc463e80d030ccc70f0a41b7a1fad64329409a7","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.7.tgz"},"directories":{}},"0.0.8":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.8","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"dependencies":{"bower":"~1.0.0","request":"^2.36.0"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"}],"_id":"filer@0.0.8","_shasum":"e371baa72365405232e4a9ca0c2edf2ea7b619bd","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"dist":{"shasum":"e371baa72365405232e4a9ca0c2edf2ea7b619bd","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.8.tgz"},"directories":{}},"0.0.9":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.9","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"dependencies":{"bower":"~1.0.0","request":"^2.36.0"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"}],"_id":"filer@0.0.9","_shasum":"498962de614dc237c8523bd0f81e452ce560f1f0","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"dist":{"shasum":"498962de614dc237c8523bd0f81e452ce560f1f0","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.9.tgz"},"directories":{}},"0.0.10":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.10","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.0.0","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.10","_shasum":"9c1cd5a7caf17122de4e4deb7ac080821318fd13","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"dist":{"shasum":"9c1cd5a7caf17122de4e4deb7ac080821318fd13","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.10.tgz"},"directories":{}},"0.0.11":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.11","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.0.0","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.11","_shasum":"4d486c21ace6ecda49eabcad8d00e92188479173","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"dist":{"shasum":"4d486c21ace6ecda49eabcad8d00e92188479173","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.11.tgz"},"directories":{}},"0.0.12":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.12","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.0.0","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.12","_shasum":"e6fc2921fdc8778c135ef6d8b5f47f79f3146dbf","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"dist":{"shasum":"e6fc2921fdc8778c135ef6d8b5f47f79f3146dbf","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.12.tgz"},"directories":{}},"0.0.13":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.13","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.0.0","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.13","_shasum":"4f11a43231d654c78e1797b07940d80d065305c8","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"dist":{"shasum":"4f11a43231d654c78e1797b07940d80d065305c8","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.13.tgz"},"directories":{}},"0.0.14":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.14","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"./node_modules/.bin/bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.3.8","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.14","dist":{"shasum":"ea5c584a0344c21604ae2c137eff62c5309a6998","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.14.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.15":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.15","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"./node_modules/.bin/bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.3.8","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.15","dist":{"shasum":"fc33a8ff3070b2eca47fa37a7783beb10c682595","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.15.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.16":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.16","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"./node_modules/.bin/bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.3.8","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.16","dist":{"shasum":"8e73579210d1ac9cf820ab027a989be2875db890","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.16.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.17":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.17","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"./node_modules/.bin/bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.3.8","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.17","dist":{"shasum":"bd6742112836ffc374faf0afc4285d790880fc09","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.17.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.19":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.19","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"./node_modules/.bin/bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.3.8","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.19","dist":{"shasum":"6de5731e62072b26534d7c25cb7d902a49078542","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.19.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.20":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.20","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"./node_modules/.bin/bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.3.8","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.20","dist":{"shasum":"a1946661475652dee28cc127e1de22ac62c8210c","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.20.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.21":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.21","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"./node_modules/.bin/bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.3.8","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.21","dist":{"shasum":"213afa117a28c55b3880ee7c86f0223299ae85af","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.21.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.22":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.22","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"./node_modules/.bin/bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.3.8","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975","base64-arraybuffer":"^0.1.2"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.22","dist":{"shasum":"7173e78f0fa49b03c11f930be3c905a8d23bd56c","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.22.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.23":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.23","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"./node_modules/.bin/bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.3.8","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975","base64-arraybuffer":"^0.1.2"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.23","dist":{"shasum":"30e224c2c444ce80139d958edf685f8e2d4b9a31","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.23.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.24":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.24","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"./node_modules/.bin/bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.3.8","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975","base64-arraybuffer":"^0.1.2"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.24","dist":{"shasum":"d4bf3f219c1fc7d0c70cf550eabcb018decaa5a0","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.24.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.25":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.25","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"./node_modules/.bin/bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.3.8","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975","base64-arraybuffer":"^0.1.2"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.25","dist":{"shasum":"b61786344297eee52fea270163e9c993ee21588b","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.25.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.26":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.26","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"./node_modules/.bin/bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.3.8","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975","base64-arraybuffer":"^0.1.2"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.26","dist":{"shasum":"04464146883565e9ca93d6d7349136e53ff8d6f2","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.26.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.27":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.27","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"./node_modules/.bin/bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"browser":{"request":"browser-request"},"dependencies":{"bower":"~1.3.8","request":"^2.36.0","browser-request":"git://github.com/humphd/browser-request.git#959ea95bf200d64939ed76897d3b06bb684f3a0d","jszip":"git://github.com/humphd/jszip.git#ad3f356bb165aba1cafeabe1bb3e49293803f975","base64-arraybuffer":"^0.1.2"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.27","dist":{"shasum":"6333bc27e6e2e0b695617292d8bee418fcc36637","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.27.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.28":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.28","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://js-platform.github.io/filer","bugs":{"url":"https://github.com/js-platform/filer/issues"},"license":"BSD","scripts":{"postinstall":"./node_modules/.bin/bower install","test":"grunt test"},"repository":{"type":"git","url":"https://github.com/js-platform/filer.git"},"dependencies":{"bower":"~1.3.8","base64-arraybuffer":"^0.1.2"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.28","dist":{"shasum":"f26d421aad10a22b380888b80b051374d4a4ab1e","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.28.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.29":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.29","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://filerjs.github.io/filer","bugs":{"url":"https://github.com/filerjs/filer/issues"},"license":"BSD","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/filerjs/filer.git"},"dependencies":{"bower":"~1.3.8","base64-arraybuffer":"^0.1.2"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.29","dist":{"shasum":"92cbb574cd22994de5958d88a0f135cb25abf6ad","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.29.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.33":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.33","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://filerjs.github.io/filer","bugs":{"url":"https://github.com/filerjs/filer/issues"},"license":"BSD","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/filerjs/filer.git"},"dependencies":{"bower":"~1.3.8","base64-arraybuffer":"^0.1.2"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"_id":"filer@0.0.33","dist":{"shasum":"832f3944cfa02f6876b0fb4007e6b35dfb1b1fac","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.33.tgz"},"_from":".","_npmVersion":"1.3.6","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}},"0.0.35":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.35","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://filerjs.github.io/filer","bugs":{"url":"https://github.com/filerjs/filer/issues"},"license":"BSD","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/filerjs/filer.git"},"dependencies":{"bower":"~1.3.8","base64-arraybuffer":"^0.1.2"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"0.2.10","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","semver":"^2.3.0","requirejs":"^2.1.14"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"gitHead":"62be361fdcafe50028add3ee23f1b991cbed564c","_id":"filer@0.0.35","_shasum":"33d9efa8ff7df79e60df73f8936c92aa4c32a8b8","_from":".","_npmVersion":"2.1.5","_nodeVersion":"0.10.32","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"dist":{"shasum":"33d9efa8ff7df79e60df73f8936c92aa4c32a8b8","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.35.tgz"},"directories":{}},"0.0.36":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.36","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://filerjs.github.io/filer","bugs":{"url":"https://github.com/filerjs/filer/issues"},"license":"BSD","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/filerjs/filer.git"},"dependencies":{"bower":"~1.3.8","base64-arraybuffer":"^0.1.2","minimatch":"^1.0.0"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-banner":"^0.2.3","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"git://github.com/sedge/grunt-git.git#gitrm","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","requirejs":"^2.1.14","semver":"^2.3.0"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"gitHead":"f160f540a079148d37d267bcec27c9ed6f86e583","_id":"filer@0.0.36","_shasum":"d47a1757b226bfe157ea2c66efd480c6f7abc3eb","_from":".","_npmVersion":"2.1.5","_nodeVersion":"0.10.32","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"dist":{"shasum":"d47a1757b226bfe157ea2c66efd480c6f7abc3eb","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.36.tgz"},"directories":{}},"0.0.37":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.37","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://filerjs.github.io/filer","bugs":{"url":"https://github.com/filerjs/filer/issues"},"license":"BSD","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/filerjs/filer.git"},"dependencies":{"bower":"~1.3.8","base64-arraybuffer":"^0.1.2","minimatch":"^1.0.0"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-banner":"^0.2.3","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"git://github.com/sedge/grunt-git.git#gitrm","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","requirejs":"^2.1.14","semver":"^2.3.0"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"gitHead":"2b6d54cbf44849c1c619e4552c9b41ac5e3bc338","_id":"filer@0.0.37","_shasum":"58df762ea015e3899d6d85ac6f9ed1a1a5a81354","_from":".","_npmVersion":"2.1.5","_nodeVersion":"0.10.32","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"dist":{"shasum":"58df762ea015e3899d6d85ac6f9ed1a1a5a81354","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.37.tgz"},"directories":{}},"0.0.41":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.41","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://filerjs.github.io/filer","bugs":{"url":"https://github.com/filerjs/filer/issues"},"license":"BSD","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"https://github.com/filerjs/filer.git"},"dependencies":{"bower":"~1.3.8","base64-arraybuffer":"^0.1.2","minimatch":"^1.0.0"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-banner":"^0.2.3","grunt-browserify":"^2.1.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.7.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"~0.1.2","grunt-contrib-watch":"~0.3.1","grunt-git":"git://github.com/sedge/grunt-git.git#gitrm","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","requirejs":"^2.1.14","semver":"^2.3.0"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"gitHead":"2347e12db2a7fb61134df9cf23288de9a6576114","_id":"filer@0.0.41","_shasum":"c78e8fbdc59e009595ef82e427d72bd30cdf6fed","_from":".","_npmVersion":"2.1.5","_nodeVersion":"0.10.32","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"dist":{"shasum":"c78e8fbdc59e009595ef82e427d72bd30cdf6fed","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.41.tgz"},"directories":{}},"0.0.44":{"name":"filer","description":"Node-like file system for browsers","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"version":"0.0.44","author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"homepage":"http://filerjs.github.io/filer","bugs":{"url":"https://github.com/filerjs/filer/issues"},"license":"BSD","scripts":{"test":"grunt test"},"repository":{"type":"git","url":"git+https://github.com/filerjs/filer.git"},"dependencies":{"bower":"~1.3.8","base64-arraybuffer":"^0.1.2","minimatch":"^1.0.0"},"devDependencies":{"chai":"~1.9.1","grunt":"~0.4.0","grunt-banner":"^0.2.3","grunt-browserify":"^3.8.0","grunt-bump":"0.0.13","grunt-contrib-clean":"~0.4.0","grunt-contrib-compress":"~0.4.1","grunt-contrib-concat":"~0.1.3","grunt-contrib-connect":"^0.10.1","grunt-contrib-jshint":"~0.7.1","grunt-contrib-uglify":"^0.9.1","grunt-contrib-watch":"~0.3.1","grunt-git":"0.3.3","grunt-npm":"git://github.com/sedge/grunt-npm.git#branchcheck","grunt-prompt":"^1.1.0","grunt-shell":"~0.7.0","habitat":"^1.1.0","mocha":"~1.18.2","requirejs":"^2.1.14","semver":"^2.3.0"},"main":"./src/index.js","contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"gitHead":"d66114e20c7f0235698d9933dbd90217ba86fa4e","_id":"filer@0.0.44","_shasum":"f758098ef476529b1609a9bf9169b6e6adae0c3b","_from":".","_npmVersion":"2.10.1","_nodeVersion":"0.12.4","_npmUser":{"name":"modeswitch","email":"npm@ack.modeswitch.org"},"dist":{"shasum":"f758098ef476529b1609a9bf9169b6e6adae0c3b","tarball":"http://registry.npmjs.org/filer/-/filer-0.0.44.tgz"},"maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"directories":{}}},"readme":"[![NPM](https://nodei.co/npm/filer.png?downloads=true&stars=true)](https://nodei.co/npm/filer/)\n\n[![Build Status](https://secure.travis-ci.org/filerjs/filer.png?branch=develop)](http://travis-ci.org/filerjs/filer)\n\n###Filer\n\nFiler is a POSIX-like file system interface for node.js and browser-based JavaScript.\n\n###Compatibility\n\nFiler is known to work in the following browsers/versions, with the specified [Storage Providers](#providers):\n\n* node.js: v0.10.*+\n* IE: 10+ (IndexedDB)\n* Firefox: 26+ (IndexedDB)\n* Chrome: 31+ (IndexedDB, WebSQL)\n* Safari: 7.0+ (WebSQL)\n* Opera: 19+ (IndexedDB, WebSQL)\n* iOS: 3.2+ (WebSQL)\n* Android Browser: 2.1-4.4 (WebSQL), 4.4+ (IndexedDB)\n\nNOTE: if you're interested in maximum compatibility, use the `Fallback` provider instead of `Default`.\nSee the section on [Storage Providers](#providers).\n\n### Contributing\n\nWant to join the fun? We'd love to have you! See [CONTRIBUTING](https://github.com/filerjs/filer/blob/develop/CONTRIBUTING.md).\n\n### How to Get It\n\nFiler can be obtained in a number of ways:\n\n1. npm - `npm install filer`\n2. bower - `bower install filer`\n3. download pre-built versions: [filer.js](https://raw.github.com/filerjs/filer/develop/dist/filer.js), [filer.min.js](https://raw.github.com/filerjs/filer/develop/dist/filer.min.js)\n\n### Loading and Usage\n\nFiler is built as a UMD module and can therefore be loaded as a CommonJS or AMD module, or used via the global.\n\n```javascript\n// Option 1: Filer loaded via require() in node/browserify\nvar Filer = require('filer');\n\n// Option 2: Filer loaded via RequireJS\nrequirejs.config({\n  baseUrl: '/',\n  paths: {\n    'filer': 'filer/dist/filer'\n  }\n});\nrequirejs(['filer'], function(Filer) {...}\n\n// Option 3: Filer on global\nvar Filer = window.Filer;\n```\n\n### Getting Started\n\nFiler is as close to the node.js [fs module](http://nodejs.org/api/fs.html) as possible,\nwith the following differences:\n\n* No synchronous versions of methods (e.g., `mkdir()` but not `mkdirSync()`).\n* No permissions (e.g., no `chown()`, `chmod()`, etc.).\n* No support for stream-based operations (e.g., `fs.ReadStream`, `fs.WriteStream`).\n\nFiler has other features lacking in node.js (e.g., swappable backend\nstorage providers, extended attributes, etc).\n\nLike node.js, the API is asynchronous and most methods expect the caller to provide\na callback function (note: like node.js, Filer will supply one if it's missing).\nErrors are passed to callbacks through the first parameter.  As with node.js,\nthere is no guarantee that file system operations will be executed in the order\nthey are invoked. Ensure proper ordering by chaining operations in callbacks.\n\n### Overview\n\nTo create a new file system or open an existing one, create a new `FileSystem`\ninstance.  By default, a new [IndexedDB](https://developer.mozilla.org/en/docs/IndexedDB)\ndatabase is created for each file system. The file system can also use other\nbackend storage providers, for example [WebSQL](http://en.wikipedia.org/wiki/Web_SQL_Database)\nor even RAM (i.e., for temporary storage). See the section on [Storage Providers](#providers).\n\n```javascript\nvar fs = new Filer.FileSystem();\nfs.open('/myfile', 'w+', function(err, fd) {\n  if (err) throw err;\n  fs.close(fd, function(err) {\n    if (err) throw err;\n    fs.stat('/myfile', function(err, stats) {\n      if (err) throw err;\n      console.log('stats: ' + JSON.stringify(stats));\n    });\n  });\n});\n```\n\nFor a complete list of `FileSystem` methods and examples, see the [FileSystem Instance Methods](#FileSystemMethods)\nsection below.\n\nFiler also supports node's Path module. See the [Filer.Path](#FilerPath) section below.\n\nIn addition, common shell operations (e.g., rm, touch, cat, etc.) are supported via the\n`FileSystemShell` object, which can be obtained from, and used with a `FileSystem`.\nSee the[FileSystemShell](#FileSystemShell) section below.\n\n### API Reference\n\nLike node.js, callbacks for methods that accept them are optional but suggested (i.e., if\nyou omit the callback, errors will be thrown as exceptions). The first callback parameter is\nreserved for passing errors. It will be `null` if no errors occurred and should always be checked.\n\n#### Filer.FileSystem(options, callback) constructor\n\nFile system constructor, invoked to open an existing file system or create a new one.\nAccepts two arguments: an `options` object, and an optional `callback`. The `options`\nobject can specify a number of optional arguments, including:\n\n* `name`: the name of the file system, defaults to `'\"local'`\n* `flags`: an Array of one or more flags to use when creating/opening the file system:\n  * `'FORMAT'` to force Filer to format (i.e., erase) the file system\n  * `'NOCTIME'` to force Filer to not update `ctime` on nodes when metadata changes (i.e., for better performance)\n  * `'NOMTIME'` to force Filer to not update `mtime` on nodes when data changes (i.e., for better performance)\n* `provider`: an explicit storage provider to use for the file system's database context provider. See the section on [Storage Providers](#providers).\n\nThe `callback` function indicates when the file system is ready for use. Depending on the storage provider used, this might\nbe right away, or could take some time. The callback should expect two arguments: first, an `error` argument, which will be\nnull if everything worked; second, an instance, such that you can access the newly ready FileSystem instance. Also users\nshould check the file system's `readyState` and `error` properties to make sure it is usable.\n\n```javascript\nvar fs;\n\nfunction fsReady(err, fs) {\n  if(err) throw err;\n  // Safe to use fs now...\n}\n\nfs = new Filer.FileSystem({\n  name: \"my-filesystem\",\n  flags: [ 'FORMAT' ],\n  provider: new Filer.FileSystem.providers.Memory()\n}, fsReady);\n```\n\nNOTE: if the optional callback argument is not passed to the `FileSystem` constructor,\noperations done on the resulting file system will be queued and run in sequence when\nit becomes ready.\n\n####Filer.FileSystem.providers - Storage Providers<a name=\"providers\"></a>\n\nFiler can be configured to use a number of different storage providers. The provider object encapsulates all aspects\nof data access, making it possible to swap in different backend storage options.  There are currently 4 different\nproviders to choose from:\n\n* `FileSystem.providers.IndexedDB()` - uses IndexedDB\n* `FileSystem.providers.WebSQL()` - uses WebSQL\n* `FileSystem.providers.Fallback()` - attempts to use IndexedDB if possible, falling-back to WebSQL if necessary\n* `FileSystem.providers.Memory()` - uses memory (not suitable for data that needs to survive the current session)\n\nYou can choose your provider when creating a `FileSystem`:\n\n```javascript\nvar FileSystem = Filer.FileSystem;\nvar providers = FileSystem.providers;\n\n// Example 1: Use the default provider (currently IndexedDB)\nvar fs1 = new FileSystem();\n\n// Example 2: Explicitly use IndexedDB\nvar fs2 = new FileSystem({ provider: new providers.IndexedDB() });\n\n// Example 3: Use one of IndexedDB or WebSQL, whichever is supported\nvar fs3 = new FileSystem({ provider: new providers.Fallback() });\n```\n\nEvery provider has an `isSupported()` method, which returns `true` if the browser supports this provider:\n\n```javascript\nif( Filer.FileSystem.providers.WebSQL.isSupported() ) {\n  // WebSQL provider will work in current environment...\n}\n```\n\nYou can also write your own provider if you need a different backend. See the code in `src/providers` for details.\n\nA number of other providers have been written, including:\n\n* node.js fs provider: https://github.com/humphd/filer-fs\n* node.js Amazon S3 provider: https://github.com/alicoding/filer-s3\n\n####Filer.Buffer<a name=\"FilerBuffer\"></a>\n\nWhen reading and writing data, Filer follows node.js and uses [`Buffer`](http://nodejs.org/api/buffer.html).\nWhen in a node.js environment, native `Buffer`s can be used, or Filer.Buffer, which is a shortcut\nto node's `Buffer`.  In a browser, you can use also use `Filer.Buffer`.\n\nNOTE: a `Filer.Buffer` in a browser is really an augmented `Uint8Array` (i.e., the node `Buffer` api\nmethods are added to the instance). See https://github.com/feross/buffer for more details. Additionally, unlike native `Buffer`, `Filer.Buffer`'s constructor can accept `ArrayBuffer` objects, which will be interpreted as `Uint8Array`s.\n\n####Filer.Path<a name=\"FilerPath\"></a>\n\nThe node.js [path module](http://nodejs.org/api/path.html) is available via the `Filer.Path` object. It is\nidentical to the node.js version with the following differences:\n* No notion of a current working directory in `resolve` (the root dir is used instead)\n\n```javascript\nvar path = Filer.Path;\nvar dir = path.dirname('/foo/bar/baz/asdf/quux');\n// dir is now '/foo/bar/baz/asdf'\n\nvar base = path.basename('/foo/bar/baz/asdf/quux.html');\n// base is now 'quux.html'\n\nvar ext = path.extname('index.html');\n// ext is now '.html'\n\nvar newpath = path.join('/foo', 'bar', 'baz/asdf', 'quux', '..');\n// new path is now '/foo/bar/baz/asdf'\n```\n\nFor more info see the docs in the [path module](http://nodejs.org/api/path.html) for a particular method:\n* `path.normalize(p)`\n* `path.join([path1], [path2], [...])`\n* `path.resolve([from ...], to)`\n* `path.relative(from, to)`\n* `path.dirname(p)`\n* `path.basename(p, [ext])`\n* `path.extname(p)`\n* `path.sep`\n* `path.delimiter`\n\n####Filer.Errors<a name=\"Errors\"></a>\n\nThe error objects used internally by Filer are also exposed via the `Filer.Errors` object. As much as possible\nthese match their node.js counterparts, with a few Filer-specifc additions.\nSee [src/errors.js](https://github.com/filerjs/filer/blob/develop/src/errors.js) for the complete\nlist. Errors can be used, or compared, like so:\n\nExamples:\n\n```javascript\n// Example 1: create an EExist error\nvar err1 = new Filer.Errors.EEXIST();\nvar err2 = new Filer.Errors[47];\n\n// Example 2: compare an error to see if it is EInvalid\nfunction callback(err) {\n  if(err instanceof Filer.Errors.EINVAL){\n    ...\n  }\n\n  // Or compare the error's code\n  if(err.code === 'EINVAL') {\n    ...\n  }\n}\n\n// Example 4: compare an error using errno\nfunction callback(err) {\n  if(err.errno === 47){\n    ...\n  }\n\n// Example 5: display the error message\nconsole.log(err.message);\n```\n\n###FileSystem Instance Methods<a name=\"FileSystemMethods\"></a>\n\nOnce a `FileSystem` is created, it has the following methods. NOTE: code examples below assume\na `FileSystem` instance named `fs` has been created like so:\n\n```javascript\nvar fs = new Filer.FileSystem();\n```\n\n* [fs.rename(oldPath, newPath, callback)](#rename)\n* [fs.ftruncate(fd, len, callback)](#ftruncate)\n* [fs.truncate(path, len, callback)](#truncate)\n* [fs.stat(path, callback)](#stat)\n* [fs.fstat(fd, callback)](#fstat)\n* [fs.lstat(path, callback)](#lstat)\n* [fs.exists(path, callback)](#exists)\n* [fs.link(srcpath, dstpath, callback)](#link)\n* [fs.symlink(srcpath, dstpath, [type], callback)](#symlink)\n* [fs.readlink(path, callback)](#readlink)\n* [fs.realpath(path, [cache], callback)](#realpath)\n* [fs.unlink(path, callback)](#unlink)\n* [fs.mknod(path, mode, callback)](#mknod)\n* [fs.rmdir(path, callback)](#rmdir)\n* [fs.mkdir(path, [mode], callback)](#mkdir)\n* [fs.readdir(path, callback)](#readdir)\n* [fs.close(fd, callback)](#close)\n* [fs.open(path, flags, [mode], callback)](#open)\n* [fs.utimes(path, atime, mtime, callback)](#utimes)\n* [fs.futimes(fd, atime, mtime, callback)](#fsutimes)\n* [fs.fsync(fd, callback)](#fsync)\n* [fs.write(fd, buffer, offset, length, position, callback)](#write)\n* [fs.read(fd, buffer, offset, length, position, callback)](#read)\n* [fs.readFile(filename, [options], callback)](#readFile)\n* [fs.writeFile(filename, data, [options], callback)](#writeFile)\n* [fs.appendFile(filename, data, [options], callback)](#appendFile)\n* [fs.setxattr(path, name, value, [flag], callback)](#setxattr)\n* [fs.fsetxattr(fd, name, value, [flag], callback)](#fsetxattr)\n* [fs.getxattr(path, name, callback)](#getxattr)\n* [fs.fgetxattr(fd, name, callback)](#fgetxattr)\n* [fs.removexattr(path, name, callback)](#removexattr)\n* [fs.fremovexattr(fd, name, callback)](#fremovexattr)\n* [fs.watch(filename, [options], [listener])](#watch)\n\n#### fs.rename(oldPath, newPath, callback)<a name=\"rename\"></a>\n\nRenames the file at `oldPath` to `newPath`. Asynchronous [rename(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/rename.html).\nCallback gets no additional arguments.\n\nExample:\n\n```javascript\n// Rename myfile.txt to myfile.bak\nfs.rename(\"/myfile.txt\", \"/myfile.bak\", function(err) {\n  if(err) throw err;\n  // myfile.txt is now myfile.bak\n});\n```\n\n#### fs.ftruncate(fd, len, callback)<a name=\"ftruncate\"></a>\n\nChange the size of the file represented by the open file descriptor `fd` to be length\n`len` bytes. Asynchronous [ftruncate(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/ftruncate.html).\nIf the file is larger than `len`, the extra bytes will be discarded; if smaller, its size will\nbe increased, and the extended area will appear as if it were zero-filled. See also [fs.truncate()](#truncate).\n\nExample:\n\n```javascript\n// Create a file, shrink it, expand it.\nvar buffer = new Filer.Buffer([1, 2, 3, 4, 5, 6, 7, 8]);\n\nfs.open('/myfile', 'w', function(err, fd) {\n  if(err) throw error;\n  fs.write(fd, buffer, 0, buffer.length, 0, function(err, result) {\n    if(err) throw error;\n      fs.ftruncate(fd, 3, function(err) {\n        if(err) throw error;\n        // /myfile is now 3 bytes in length, rest of data discarded\n\n        fs.ftruncate(fd, 50, function(err) {\n          if(err) throw error;\n          // /myfile is now 50 bytes in length, with zero padding at end\n\n          fs.close(fd);\n        });\n      });\n    });\n  });\n});\n```\n\n#### fs.truncate(path, len, callback)<a name=\"truncate\"></a>\n\nChange the size of the file at `path` to be length `len` bytes. Asynchronous [truncate(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/truncate.html). If the file is larger than `len`, the extra bytes will be discarded; if smaller, its size will\nbe increased, and the extended area will appear as if it were zero-filled. See also [fs.ftruncate()](#ftruncate).\n\nExample:\n\n```javascript\n// Create a file, shrink it, expand it.\nvar buffer = new Filer.Buffer([1, 2, 3, 4, 5, 6, 7, 8]);\n\nfs.open('/myfile', 'w', function(err, fd) {\n  if(err) throw error;\n  fs.write(fd, buffer, 0, buffer.length, 0, function(err, result) {\n    if(err) throw error;\n    fs.close(fd, function(err) {\n      if(err) throw error;\n\n      fs.truncate('/myfile', 3, function(err) {\n        if(err) throw error;\n        // /myfile is now 3 bytes in length, rest of data discarded\n\n        fs.truncate('/myfile', 50, function(err) {\n          if(err) throw error;\n          // /myfile is now 50 bytes in length, with zero padding at end\n\n        });\n      });\n    });\n  });\n});\n```\n\n#### fs.stat(path, callback)<a name=\"stat\"></a>\n\nObtain file status about the file at `path`. Asynchronous [stat(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/stat.html).\nCallback gets `(error, stats)`, where `stats` is an object with the following properties:\n\n```\n{\n  node: <string>   // internal node id (unique)\n  dev: <string>    // file system name\n  size: <number>   // file size in bytes\n  nlinks: <number> // number of links\n  atime: <number>  // last access time\n  mtime: <number>  // last modified time\n  ctime: <number>  // creation time\n  type: <string>   // file type (FILE, DIRECTORY, SYMLINK)\n}\n```\n\nThe following convenience methods are also present on the callback's `stats`:\n\n```\nisFile():             Returns true if the node is a file.\nisDirectory():        Returns true if the node is a directory.\nisBlockDevice():      Not implemented, returns false.\nisCharacterDevice():  Not implemented, returns false.\nisSymbolicLink():     Returns true if the node is a symbolic link.\nisFIFO():             Not implemented, returns false.\nisSocket():           Not implemented, returns false.\n```\n\nIf the file at `path` is a symbolic link, the file to which it links will be used instead.\nTo get the status of a symbolic link file, use [fs.lstat()](#lstat) instead.\n\nExamples:\n\n```javascript\n// Check if a directory exists\nfunction dirExists(path, callback) {\n  fs.stat(path, function(err, stats) {\n    if(err) return callback(err);\n    var exists = stats.type === \"DIRECTORY\";\n    callback(null, exists);\n  });\n};\n\n// Get the size of a file in KB\nfunction fileSize(path, callback) {\n  fs.stat(path, function(err, stats) {\n    if(err) return callback(err);\n    var kb = stats.size / 1000;\n    callback(null, kb);\n  });\n}\n```\n\n#### fs.fstat(fd, callback)<a name=\"fstat\"></a>\n\nObtain information about the open file known by the file descriptor `fd`.\nAsynchronous [fstat(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/fstat.html).\nCallback gets `(error, stats)`. `fstat()` is identical to `stat()`, except that the file to be stat-ed is\nspecified by the open file descriptor `fd` instead of a path.  See also [fs.stat](#stat)\n\nExample:\n\n```javascript\nfs.open(\"/file.txt\", \"r\", function(err, fd) {\n  if(err) throw err;\n  fs.fstat(fd, function(err, stats) {\n    if(err) throw err;\n    // do something with stats object\n    // ...\n    fs.close(fd);\n  });\n});\n```\n\n#### fs.lstat(path, callback)<a name=\"lstat\"></a>\n\nObtain information about the file at `path` (i.e., the symbolic link file itself) vs.\nthe destination file to which it links. Asynchronous [lstat(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/lstat.html).\nCallback gets `(error, stats)`. See also [fs.stat](#stat).\n\nExample:\n\n```javascript\n// Create a symbolic link, /data/logs/current to /data/logs/august\n// and get info about the symbolic link file, and linked file.\nfs.link(\"/data/logs/august\", \"/data/logs/current\", function(err) {\n  if(err) throw err;\n\n  // Get status of linked file, /data/logs/august\n  fs.stat(\"/data/logs/current\", function(err, stats) {\n    if(err) throw err;\n    // Size of /data/logs/august\n    var size = stats.size;\n  });\n\n  // Get status of symbolic link file itself\n  fs.lstat(\"/data/logs/current\", function(err, stats) {\n    if(err) throw err;\n    // Size of /data/logs/current\n    var size = stats.size;\n  });\n});\n```\n\n#### fs.exists(path, callback)<a name=\"exists\"></a>\n\nTest whether or not the given path exists by checking with the file system.\nThen call the callback argument with either true or false.\n\nExample:\n\n```javascript\n//Test if the file exists\nfs.exists('/myfile', function (exists) {\n  console.log(exists ? \"file exists\" : \"file not found\");\n});\n```\n\nfs.exists() is an anachronism and exists only for historical reasons. There should almost never be a reason to use it in your own code.\n\nIn particular, checking if a file exists before opening it is an anti-pattern that leaves you vulnerable to race conditions: another process may remove the file between the calls to fs.exists() and fs.open(). Just open the file and handle the error when it's not there.\n\n#### fs.link(srcPath, dstPath, callback)<a name=\"link\"></a>\n\nCreate a (hard) link to the file at `srcPath` named `dstPath`. Asynchronous [link(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/link.html). Callback gets no additional arguments. Links are directory entries that point to the same file node.\n\nExample:\n\n```javascript\nfs.link('/logs/august.log', '/logs/current', function(err) {\n  if(err) throw err;\n  fs.readFile('/logs/current', 'utf8', function(err, data) {\n    // data is the contents of /logs/august.log\n    var currentLog = data;\n  });\n});\n```\n\n#### fs.symlink(srcPath, dstPath, [type], callback)<a name=\"symlink\"></a>\n\nCreate a symbolic link to the file at `dstPath` containing the path `srcPath`. Asynchronous [symlink(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/symlink.html). Callback gets no additional arguments.\nSymbolic links are files that point to other paths.\n\nNOTE: Filer allows for, but ignores the optional `type` parameter used in node.js.\n\nExample:\n\n```javascript\nfs.symlink('/logs/august.log', '/logs/current', function(err) {\n  if(err) throw err;\n  fs.readFile('/logs/current', 'utf8', function(err, data) {\n    // data is the contents of /logs/august.log\n    var currentLog = data;\n  });\n});\n```\n\n#### fs.readlink(path, callback)<a name=\"readlink\"></a>\n\nReads the contents of a symbolic link. Asynchronous [readlink(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/readlink.html). Callback gets `(error, linkContents)`, where `linkContents` is a string containing the symbolic link's link path.\n\nExample:\n\n```javascript\nfs.symlink('/logs/august.log', '/logs/current', function(error) {\n  if(error) throw error;\n\n  fs.readlink('/logs/current', function(error, linkContents) {\n    // linkContents is now '/logs/august.log'\n  });\n});\n```\n\n#### fs.realpath(path, [cache], callback)<a name=\"realpath\"></a>\n\nNOTE: Not implemented, see https://github.com/filerjs/filer/issues/85\n\n#### fs.unlink(path, callback)<a name=\"unlink\"></a>\n\nRemoves the directory entry located at `path`. Asynchronous [unlink(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/unlink.html).\nCallback gets no additional arguments. If `path` names a symbolic link, the symbolic link will be removed\n(i.e., not the linked file). Otherwise, the filed named by `path` will be removed (i.e., deleted).\n\nExample:\n\n```javascript\n// Delete regular file /backup.old\nfs.unlink('/backup.old', function(err) {\n  if(err) throw err;\n  // /backup.old is now removed\n});\n```\n\n#### fs.mknod(path, mode, callback)<a name=\"mknod\"></a>\n\nCreates a node at `path` based on the mode passed which is either `FILE` or `DIRECTORY`. Asynchronous [mknod(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/mknod.html). Callback gets no additional arguments.\n\nExample:\n\n```javascript\n// Create a /dir directory\nfs.mknod('/dir', 'DIRECTORY', function(err) {\n  if(err) throw err;\n  // /dir is now created\n\n  // Create a file inside /dir\n  fs.mknod('/dir/myfile', 'FILE', function(err) {\n    if(err) throw err;\n    // /dir/myfile now exists\n  });\n});\n```\n\n#### fs.rmdir(path, callback)<a name=\"rmdir\"></a>\n\nRemoves the directory at `path`. Asynchronous [rmdir(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/rmdir.html).\nCallback gets no additional arguments. The operation will fail if the directory at `path` is not empty.\n\nExample:\n\n```javascript\n/**\n * Given the following dir structure, remove docs/\n *  /docs\n *    a.txt\n */\n\n// Start by deleting the files in docs/, then remove docs/\nfs.unlink('/docs/a.txt', function(err) {\n  if(err) throw err;\n  fs.rmdir('/docs', function(err) {\n    if(err) throw err;\n  });\n});\n```\n\n#### fs.mkdir(path, [mode], callback)<a name=\"mkdir\"></a>\n\nMakes a directory with name supplied in `path` argument. Asynchronous [mkdir(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/mkdir.html). Callback gets no additional arguments.\n\nNOTE: Filer allows for, but ignores the optional `mode` argument used in node.js.\n\nExample:\n\n```javascript\n// Create /home and then /home/carl directories\nfs.mkdir('/home', function(err) {\n  if(err) throw err;\n\n  fs.mkdir('/home/carl', function(err) {\n    if(err) throw err;\n    // directory /home/carl now exists\n  });\n});\n```\n\n#### fs.readdir(path, callback)<a name=\"readdir\"></a>\n\nReads the contents of a directory. Asynchronous [readdir(3)](http://pubs.opengroup.org/onlinepubs/009695399/functions/readdir.html).\nCallback gets `(error, files)`, where `files` is an array containing the names of each directory entry (i.e., file, directory, link) in the directory, excluding `.` and `..`.\n\nExample:\n\n```javascript\n/**\n * Given the following dir structure:\n *  /docs\n *    a.txt\n *    b.txt\n *    c/\n */\nfs.readdir('/docs', function(err, files) {\n  if(err) throw err;\n  // files now contains ['a.txt', 'b.txt', 'c']\n});\n```\n\n#### fs.close(fd, callback)<a name=\"close\"></a>\n\nCloses a file descriptor. Asynchronous [close(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/close.html).\nCallback gets no additional arguments.\n\nExample:\n\n```javascript\nfs.open('/myfile', 'w', function(err, fd) {\n  if(err) throw error;\n\n  // Do something with open file descriptor `fd`\n\n  // Close file descriptor when done\n  fs.close(fd);\n});\n```\n\n#### fs.open(path, flags, [mode], callback)<a name=\"open\"></a>\n\nOpens a file. Asynchronous [open(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html).\nCallback gets `(error, fd)`, where `fd` is the file descriptor. The `flags` argument can be:\n\n* `'r'`: Open file for reading. An exception occurs if the file does not exist.\n* `'r+'`: Open file for reading and writing. An exception occurs if the file does not exist.\n* `'w'`: Open file for writing. The file is created (if it does not exist) or truncated (if it exists).\n* `'w+'`: Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).\n* `'a'`: Open file for appending. The file is created if it does not exist.\n* `'a+'`: Open file for reading and appending. The file is created if it does not exist.\n\nNOTE: Filer allows for, but ignores the optional `mode` argument used in node.js.\n\nExample:\n\n```javascript\nfs.open('/myfile', 'w', function(err, fd) {\n  if(err) throw error;\n\n  // Do something with open file descriptor `fd`\n\n  // Close file descriptor when done\n  fs.close(fd);\n});\n```\n\n#### fs.utimes(path, atime, mtime, callback)<a name=\"utimes\"></a>\n\nChanges the file timestamps for the file given at path `path`. Asynchronous [utimes(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/utimes.html). Callback gets no additional arguments. Both `atime` (access time) and `mtime` (modified time) arguments should be a JavaScript Date.\n\nExample:\n\n```javascript\nvar now = Date.now();\nfs.utimes('/myfile.txt', now, now, function(err) {\n  if(err) throw err;\n  // Access Time and Modified Time for /myfile.txt are now updated\n});\n```\n\n#### fs.futimes(fd, atime, mtime, callback)<a name=\"futimes\"></a>\n\nChanges the file timestamps for the open file represented by the file descriptor `fd`. Asynchronous [utimes(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/utimes.html). Callback gets no additional arguments. Both `atime` (access time) and `mtime` (modified time) arguments should be a JavaScript Date.\n\nExample:\n\n```javascript\nfs.open('/myfile.txt', function(err, fd) {\n  if(err) throw err;\n\n  var now = Date.now();\n  fs.futimes(fd, now, now, function(err) {\n    if(err) throw err;\n\n    // Access Time and Modified Time for /myfile.txt are now updated\n\n    fs.close(fd);\n  });\n});\n```\n\n#### fs.fsync(fd, callback)<a name=\"fsync\"></a>\n\nNOTE: Not yet implemented, see https://github.com/filerjs/filer/issues/87\n\n#### fs.write(fd, buffer, offset, length, position, callback)<a name=\"write\"></a>\n\nWrites bytes from `buffer` to the file specified by `fd`. Asynchronous [write(2), pwrite(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/write.html). The `offset` and `length` arguments describe the part of the buffer to be written. The `position` refers to the offset from the beginning of the file where this data should be written. If `position` is `null`, the data will be written at the current position. The callback gets `(error, nbytes)`, where `nbytes` is the number of bytes written.\n\nNOTE: Filer currently writes the entire buffer in a single operation. However, future versions may do it in chunks.\n\nExample:\n\n```javascript\n// Create a file with the following bytes.\nvar buffer = new Filer.Buffer([1, 2, 3, 4, 5, 6, 7, 8]);\n\nfs.open('/myfile', 'w', function(err, fd) {\n  if(err) throw error;\n\n  var expected = buffer.length, written = 0;\n  function writeBytes(offset, position, length) {\n    length = length || buffer.length - written;\n\n    fs.write(fd, buffer, offset, length, position, function(err, nbytes) {\n      if(err) throw error;\n\n      // nbytes is now the number of bytes written, between 0 and buffer.length.\n      // See if we still have more bytes to write.\n      written += nbytes;\n\n      if(written < expected)\n        writeBytes(written, null);\n      else\n        fs.close(fd);\n    });\n  }\n\n  writeBytes(0, 0);\n});\n```\n\n#### fs.read(fd, buffer, offset, length, position, callback)<a name=\"read\"></a>\n\nRead bytes from the file specified by `fd` into `buffer`. Asynchronous [read(2), pread(2)](http://pubs.opengroup.org/onlinepubs/009695399/functions/read.html). The `offset` and `length` arguments describe the part of the buffer to be used. The `position` refers to the offset from the beginning of the file where this data should be read. If `position` is `null`, the data will be written at the current position. The callback gets `(error, nbytes)`, where `nbytes` is the number of bytes read.\n\nNOTE: Filer currently reads into the buffer in a single operation. However, future versions may do it in chunks.\n\nExample:\n\n```javascript\nfs.open('/myfile', 'r', function(err, fd) {\n  if(err) throw error;\n\n  // Determine size of file\n  fs.fstat(fd, function(err, stats) {\n    if(err) throw error;\n\n    // Create a buffer large enough to hold the file's contents\n    var nbytes = expected = stats.size;\n    var buffer = new Filer.Buffer(nbytes);\n    var read = 0;\n\n    function readBytes(offset, position, length) {\n      length = length || buffer.length - read;\n\n      fs.read(fd, buffer, offset, length, position, function(err, nbytes) {\n        if(err) throw error;\n\n        // nbytes is now the number of bytes read, between 0 and buffer.length.\n        // See if we still have more bytes to read.\n        read += nbytes;\n\n        if(read < expected)\n          readBytes(read, null);\n        else\n          fs.close(fd);\n      });\n    }\n\n    readBytes(0, 0);\n  });\n});\n```\n\n#### fs.readFile(filename, [options], callback)<a name=\"readFile\"></a>\n\nReads the entire contents of a file. The `options` argument is optional, and can take the form `\"utf8\"` (i.e., an encoding) or be an object literal: `{ encoding: \"utf8\", flag: \"r\" }`. If no encoding is specified, the raw binary buffer is returned via the callback. The callback gets `(error, data)`, where data is the contents of the file.\n\nExamples:\n\n```javascript\n// Read UTF8 text file\nfs.readFile('/myfile.txt', 'utf8', function (err, data) {\n  if (err) throw err;\n  // data is now the contents of /myfile.txt (i.e., a String)\n});\n\n// Read binary file\nfs.readFile('/myfile.txt', function (err, data) {\n  if (err) throw err;\n  // data is now the contents of /myfile.txt (i.e., a Buffer with the bytes)\n});\n```\n\n#### fs.writeFile(filename, data, [options], callback)<a name=\"writeFile\"></a>\n\nWrites data to a file. `data` can be a string or `Buffer`, in which case any encoding option is ignored. The `options` argument is optional, and can take the form `\"utf8\"` (i.e., an encoding) or be an object literal: `{ encoding: \"utf8\", flag: \"w\" }`. If no encoding is specified, and `data` is a string, the encoding defaults to `'utf8'`.  The callback gets `(error)`.\n\nExamples:\n\n```javascript\n// Write UTF8 text file\nfs.writeFile('/myfile.txt', \"...data...\", function (err) {\n  if (err) throw err;\n});\n\n// Write binary file\nvar buffer = new Filer.Buffer([1, 2, 3, 4, 5, 6, 7, 8]);\nfs.writeFile('/myfile', buffer, function (err) {\n  if (err) throw err;\n});\n```\n\n#### fs.appendFile(filename, data, [options], callback)<a name=\"appendFile\"></a>\n\nWrites data to the end of a file. `data` can be a string or a `Buffer`, in which case any encoding option is ignored. The `options` argument is optional, and can take the form `\"utf8\"` (i.e., an encoding) or be an object literal: `{ encoding: \"utf8\", flag: \"w\" }`. If no encoding is specified, and `data` is a string, the encoding defaults to `'utf8'`.  The callback gets `(error)`.\n\nExamples:\n\n```javascript\n// Append UTF8 text file\nfs.writeFile('/myfile.txt', \"More...\", function (err) {\n\tif (err) throw err;\n});\nfs.appendFile('/myfile.txt', \"Data...\", function (err) {\n  if (err) throw err;\n});\n// '/myfile.txt' would now read out 'More...Data...'\n\n// Append binary file\nvar data = new Filer.Buffer([1, 2, 3, 4]);\nvar more = new Filer.Buffer([5, 6, 7, 8]);\n\nfs.writeFile('/myfile', data, function (err) {\n  if (err) throw err;\n\n  fs.appendFile('/myfile', more, function (err) {\n    if (err) throw err;\n\n    // '/myfile' would now contain [1, 2, 3, 4, 5, 6, 7, 8]\n  });\n});\n```\n\n#### fs.setxattr(path, name, value, [flag], callback)<a name=\"setxattr\"></a>\n\nSets an extended attribute of a file or directory named `path`. Asynchronous [setxattr(2)](http://man7.org/linux/man-pages/man2/setxattr.2.html).\nThe optional `flag` parameter can be set to the following:\n* `XATTR_CREATE`: ensures that the extended attribute with the given name will be new and not previously set. If an attribute with the given name already exists, it will return an `EExists` error to the callback.\n* `XATTR_REPLACE`: ensures that an extended attribute with the given name already exists. If an attribute with the given name does not exist, it will return an `ENoAttr` error to the callback.\n\nCallback gets no additional arguments.\n\nExample:\n\n```javascript\nfs.writeFile('/myfile', 'data', function(err) {\n  if(err) throw err;\n\n  // Set a simple extended attribute on /myfile\n  fs.setxattr('/myfile', 'extra', 'some-information', function(err) {\n    if(err) throw err;\n\n    // /myfile now has an added attribute of extra='some-information'\n  });\n\n  // Set a complex object attribute on /myfile\n  fs.setxattr('/myfile', 'extra-complex', { key1: 'value1', key2: 103 }, function(err) {\n    if(err) throw err;\n\n    // /myfile now has an added attribute of extra={ key1: 'value1', key2: 103 }\n  });\n});\n```\n\n#### fs.fsetxattr(fd, name, value, [flag], callback)<a name=\"fsetxattr\"></a>\n\nSets an extended attribute of the file represented by the open file descriptor `fd`. Asynchronous [setxattr(2)](http://man7.org/linux/man-pages/man2/setxattr.2.html).  See `fs.setxattr` for more details. Callback gets no additional arguments.\n\nExample:\n\n```javascript\nfs.open('/myfile', 'w', function(err, fd) {\n  if(err) throw err;\n\n  // Set a simple extended attribute on fd for /myfile\n  fs.fsetxattr(fd, 'extra', 'some-information', function(err) {\n    if(err) throw err;\n\n    // /myfile now has an added attribute of extra='some-information'\n  });\n\n  // Set a complex object attribute on fd for /myfile\n  fs.fsetxattr(fd, 'extra-complex', { key1: 'value1', key2: 103 }, function(err) {\n    if(err) throw err;\n\n    // /myfile now has an added attribute of extra={ key1: 'value1', key2: 103 }\n  });\n\n  fs.close(fd);\n});\n```\n\n#### fs.getxattr(path, name, callback)<a name=\"getxattr\"></a>\n\nGets an extended attribute value for a file or directory. Asynchronous [getxattr(2)](http://man7.org/linux/man-pages/man2/getxattr.2.html).\nCallback gets `(error, value)`, where `value` is the value for the extended attribute named `name`.\n\nExample:\n\n```javascript\n// Get the value of the extended attribute on /myfile named `extra`\nfs.getxattr('/myfile', 'extra', function(err, value) {\n  if(err) throw err;\n\n  // `value` is now the value of the extended attribute named `extra` for /myfile\n});\n```\n\n#### fs.fgetxattr(fd, name, callback)<a name=\"fgetxattr\"></a>\n\nGets an extended attribute value for the file represented by the open file descriptor `fd`.\nAsynchronous [getxattr(2)](http://man7.org/linux/man-pages/man2/getxattr.2.html).\nSee `fs.getxattr` for more details. Callback gets `(error, value)`, where `value` is the value for the extended attribute named `name`.\n\nExample:\n\n```javascript\n// Get the value of the extended attribute on /myfile named `extra`\nfs.open('/myfile', 'r', function(err, fd) {\n  if(err) throw err;\n\n  fs.fgetxattr(fd, 'extra', function(err, value) {\n    if(err) throw err;\n\n    // `value` is now the value of the extended attribute named `extra` for /myfile\n  });\n\n  fs.close(fd);\n});\n```\n\n#### fs.removexattr(path, name, callback)<a name=\"removexattr\"></a>\n\nRemoves the extended attribute identified by `name` for the file given at `path`. Asynchronous [removexattr(2)](http://man7.org/linux/man-pages/man2/removexattr.2.html). Callback gets no additional arguments.\n\nExample:\n\n```javascript\n// Remove an extended attribute on /myfile\nfs.removexattr('/myfile', 'extra', function(err) {\n  if(err) throw err;\n\n  // The `extra` extended attribute on /myfile is now gone\n});\n```\n\n#### fs.fremovexattr(fd, name, callback)<a name=\"fremovexattr\"></a>\n\nRemoves the extended attribute identified by `name` for the file represented by the open file descriptor `fd`.\nAsynchronous [removexattr(2)](http://man7.org/linux/man-pages/man2/removexattr.2.html). See `fs.removexattr` for more details.\nCallback gets no additional arguments.\n\nExample:\n\n```javascript\n// Remove an extended attribute on /myfile\nfs.open('/myfile', 'r', function(err, fd) {\n  if(err) throw err;\n\n  fs.fremovexattr(fd, 'extra', function(err) {\n    if(err) throw err;\n\n    // The `extra` extended attribute on /myfile is now gone\n  });\n\n  fs.close(fd);\n});\n```\n\n#### fs.watch(filename, [options], [listener])<a name=\"watch\"></a>\n\nWatch for changes to a file or directory at `filename`. The object returned is an `FSWatcher`,\nwhich is an [`EventEmitter`](http://nodejs.org/api/events.html) with the following additional method:\n\n* `close()` - stops listening for changes, and removes all listeners from this instance. Use this\nto stop watching a file or directory after calling `fs.watch()`.\n\nThe only supported option is `recursive`, which if `true` will cause a watch to be placed\non a directory, and all sub-directories and files beneath it.\n\nThe `listener` callback gets two arguments `(event, filename)`. `event` is either `'rename'` or `'change'`,\n(currenty only `'rename'` is supported) and `filename` is the name of the file/dir which triggered the event.\n\nUnlike node.js, all watch events return a path. Also, all returned paths are absolute from the root\nvs. just a relative filename.\n\nExamples:\n\n```javascript\n// Example 1: create a watcher to see when a file is created\nvar watcher = fs.watch('/myfile', function(event, filename) {\n  // event could be 'change' or 'rename' and filename will be '/myfile'\n  // Stop watching for changes\n  watcher.close();\n});\nfs.writeFile('/myfile', 'data');\n\n// Example 2: add the listener via watcher.on()\nvar watcher = fs.watch('/myfile2');\nwatcher.on('change', function(event, filename) {\n  // event will be 'change' and filename will be '/myfile2'\n  // Stop watching for changes\n  watcher.close();\n});\nfs.writeFile('/myfile2', 'data2');\n\n// Example 3: recursive watch on /data dir\nvar watcher = fs.watch('/data', { recursive: true }, function(event, filename) {\n  // event could be 'change' or 'rename' and filename will be '/data/subdir/file'\n  // Stop watching for changes\n  watcher.close();\n});\nfs.writeFile('/data/subdir/file', 'data');\n```\n\n### FileSystemShell<a name=\"FileSystemShell\"></a>\n\nMany common file system shell operations are available by using a `FileSystemShell` object.\nThe `FileSystemShell` is used in conjuction with a `FileSystem`,\nand provides augmented features. Many separate `FileSystemShell` objects can exist per\n`FileSystem`, but each `FileSystemShell` is bound to a single instance of a `FileSystem`\nfor its lifetime.\n\nA `FileSystemShell` is created by instantiating `Filer.FileSystem().Shell`:\n\n```javascript\nvar fs = new Filer.FileSystem();\nvar sh = new fs.Shell(options);\nvar sh2 = new fs.Shell(options);\n// sh and sh2 are two separate shells, each bound to fs\n```\n\nIn addition, the constructor function can be accessed through `Filer`:\n\n```javascript\nvar fs = new Filer.FileSystem();\nvar sh = new fs.Shell();\n\nFiler.Shell.prototype.newFunction = ...;\n\nsh.newFunction();\n```\n\nThe `FileSystemShell` can take an optional `options` object. The `options` object\ncan include `env`, which is a set of environment variables. Currently supported variables\ninclude `TMP` (the path to the temporary directory), and `PATH` (the list of known paths) and\nothers may be added in the future. You can also add your own, or update existing variables.\n\n```javascript\nvar fs = new Filer.FileSystem();\nvar sh = new fs.Shell({\n  env: {\n    TMP: '/tempdir',\n    PATH: '/one:/two'\n  }\n});\nvar tempPath = sh.env.get('TMP');\nsh.env.set('TMP', '/newtempdir');\n```\n\nNOTE: unless otherwise stated, all `FileSystemShell` methods can take relative or absolute\npaths. Relative paths are resolved relative to the shell's current working directory (`sh.cwd`).\nThis is different from the `FileSystem`, which requires absolute paths, and has no notion\nof a current working directory.\n\n#### FileSystemShell Properties\n\nA `FileSystemShell` has a number of properties, including:\n* `fs` - (readonly) a reference to the bound `FileSystem`\n* `env` - (readonly) the shell's environment. The shell's environemnt `env` object has `get(name)`\nand `set(name, value)` methods.\n\nExample:\n\n```javascript\nvar fs = new Filer.FileSystem();\nvar sh = new fs.Shell();\nvar p = sh.env.get('PATH');\n\n// Store the current location\nvar before = sh.pwd();\nvar after;\nsh.cd('/newdir', function(err) {\n  if(err) throw err;\n  // Get the new location\n  after = sh.pwd();\n});\n```\n\n#### FileSystemShell Instance Methods\n\nOnce a `FileSystemShell` object is created, it has the following methods. NOTE: code\nexamples below assume a `FileSystemShell` instance named `sh` has been created like so:\n\n```javascript\nvar fs = new Filer.FileSystem();\nvar sh = new fs.Shell();\n```\n\n* [sh.cd(path, callback)](#cd)\n* [sh.pwd()](#pwd)\n* [sh.find(dir, [options], callback)](#find)\n* [sh.ls(dir, [options], callback)](#ls)\n* [sh.exec(path, [args], callback)](#exec)\n* [sh.touch(path, [options], callback)](#touch)\n* [sh.cat(files, callback)](#cat)\n* [sh.rm(path, [options], callback)](#rm)\n* [sh.tempDir(callback)](#tempDir)\n* [sh.mkdirp(path, callback)](#mkdirp)\n\n\n#### sh.cd(path, callback)<a name=\"cd\"></a>\n\nChanges the current working directory to the directory at `path`. The callback returns\nan error if `path` does not exist, or is not a directory. Once the callback occurs\nthe shell's cwd is updated to the new path (you can access it via `sh.pwd()`).\n\nExample:\n\n```javascript\nsh.cd('/dir1', function(err) {\n  if(err) throw err;\n  // sh.pwd() is now '/dir1'\n});\n```\n\n#### sh.pwd()<a name=\"pwd\"></a>\n\nReturns the shell's current working directory. See [sh.cd()](#cd).\n\n#### sh.find(dir, [options], callback)<a name=\"find\"></a>\n\nRecursively walk a directory tree, reporting back all paths that were\nfound along the way. Asynchronous [find(1)](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/find.html\n)\nIf given no options, `find` walks the given dir path\nand the callback gives `function(err, found)`, where `found` is an array of\nall paths discovered during a depth-first walk.\n\nValid options include a `regex` for pattern matching paths, allowing paths\nto be ignored (e.g., ```regex: /\\.bak$/``` to find all `.bak` files). You can\nalso use `name` and `path` to provide a [match pattern](https://github.com/isaacs/minimatch) for the basename and\ndirname respectively (e.g., `{name: '*.js'}` to find all JavaScript files or\n`{path: '*-modules'}` to only look in folders named `base-modules`, `foo-modules`, etc.).\nFinally, you can also provide an `exec` function of the form `function(path, next)` where\n`path` is the current path that was found and matches any provided `regex`\n(NOTE: dir paths have an '/' appended), and `next` is a callback to call\nwhen you are done processing the path.\n\nExample:\n\n```javascript\nfunction processPath(path, next) {\n  // Process the path somehow, in this case we print it.\n  // Dir paths end with /\n  if(path.endsWith('/')) {\n    console.log('Found dir: ' + path);\n  } else {\n    console.log('Found file: ' + path);\n  }\n\n  // All done, let the process continue by invoking second arg:\n  next();\n}\n\n// Get every path (NOTE: no name or regex provided) below the root, depth first\nsh.find('/', {exec: processPath}, function(err, found) {\n  /* find command is finished, `found` contains the flattened list as an Array */\n});\n\n// Find all files that look like map201.jpg, map202.jpg in the /data dir\nsh.find('/data', {regex: /map20\\d\\.jpg$/, exec: processPath}, function(err) {\n  /* find command is finished */\n});\n\n// Find and delete all *.bak files under /app/user\nsh.find('/app/user', {\n  name: '*.bak',\n  exec: function(path, next) {\n    sh.rm(path, next);\n  }\n}, function callback(err, found) {\n  if(err) throw err;\n\n  if(found.length) {\n    console.log('Deleted the following ' + found.length + ' files: ', found);\n  }\n});\n```\n\n#### sh.ls(dir, [options], callback)<a name=\"ls\"></a>\n\nGet the listing of a directory, returning an array of directory entries\nin the following form:\n```\n{\n  path: <String> the basename of the directory entry\n  links: <Number> the number of links to the entry\n  size: <Number> the size in bytes of the entry\n  modified: <Number> the last modified date/time\n  type: <String> the type of the entry\n  contents: <Array> an optional array of child entries, if this entry is itself a directory\n}\n```\n\nBy default `sh.ls()` gives a shallow listing. If you want to follow\ndirectories as they are encountered, use the `recursive=true` option. NOTE:\nyou should not count on the order of the returned entries always being the same.\n\nExample:\n\n```javascript\n/**\n * Given a dir structure of:\n *\n * /dir\n *  file1\n *  file2\n *  dir2/\n *   file3\n */\n\n// Shallow listing\nsh.ls('/dir', function(err, entries) {\n  if(err) throw err;\n  // entries is now an array of 3 file/dir entries under /dir\n});\n\n// Deep listing\nsh.ls('/dir', { recursive: true }, function(err, entries) {\n  if(err) throw err;\n  // entries is now an array of 3 file/dir entries under /dir.\n  // The entry object for '/dir2' also includes a `contents` property,\n  // which is an array of 1 entry element for `file3`.\n});\n```\n\n#### sh.exec(path, [args], callback)<a name=\"exec\"></a>\n\nAttempts to execute the .js command located at `path`. The `sh.exec` method\nenables apps to install larger programs into the file system and run them\nlater without having to re-download.  Such commands should be written so as\nto assume the existence of 3 global variables, which will be defined at runtime:\n* `fs` - [FileSystem] the `FileSystem` object bound to this shell.\n* `args` - [Array] a list of any arguments for the command, or the empty list\n* `callback` - [Function] a callback function of the form `function callback(error, result)`\nto call when done.\n\nThe .js command's contents should be the body of a function that\nlooks like this:\n\n```javascript\nfunction(fs, args, callback) {\n//-------------------------commmand code here---------\n// ...\n//----------------------------------------------------\n }\n```\n\nExample:\n\n```javascript\n// Simple command to delete a file.\nvar cmd = \"fs.unlink(args[0], callback);\"\n\n// Write the file to the filesystem\nfs.writeFile('/cmd.js', cmd, callback(err) {\n  if(err) throw err;\n\n  // Execute the command\n  sh.exec('/cmd.js', [ '/file' ], function(err, result) {\n    if(err) throw err;\n  });\n});\n```\n\n#### sh.touch(path, [options], callback)<a name=\"touch\"></a>\n\nCreate a file if it does not exist, or update the access and modified\ntimes if it does. Valid options include:\n* `updateOnly` - `true` if the file's access/modified dates are to be updated\nonly (but missing file not to be)\n* `date` - a date to use instead of the current date and time when updating\naccess and modified dates.\n\nExample:\n\n```javascript\nsh.touch('/newfile', function(err) {\n  if(err) throw err;\n\n  fs.exists('/newfile', function(exists) {\n    // exists is now true.\n  }\n});\n```\n\n#### sh.cat(files, callback)<a name=\"cat\"></a>\n\nConcatenates multiple files into a single string, with each file\nseparated by a newline character. The `files` argument should be\na String (i.e., path to a single file) or an Array of Strings (i.e.,\nmultiple paths for multiple files).\n\nExample:\n\n```javascript\nsh.cat([ './file1', '../file2' ], function(err, data) {\n  if(err) throw err;\n  // data is now the contents of file1 and file2 joined\n});\n```\n\n#### sh.rm(path, [options], callback)<a name=\"rm\"></a>\n\nRemoves (deletes) the file or directory at `path`. If `path` is a file, it will\nbe removed. If `path` is a directory, it will be removed if it is empty, otherwise\nthe callback will receive an error. In order to remove non-empty directories,\nuse the `recursive=true` option.\n\nExample:\n\n```javascript\nsh.rm('./file', function(err) {\n  if(err) throw err;\n  // ./file is now removed\n});\n\nsh.rm('/dir', { recursive: true }, function(err) {\n  if(err) throw err;\n  // /dir and all its children are now removed\n});\n```\n\n#### sh.tempDir(callback)<a name=\"tempDir\"></a>\n\nGets the path to the shell's temporary directory, creating it if it\ndoes not already exist. The temp directory to use is specified in the\n`env.TMP` environment variable. The callback receives an error\nand the `tempDir` path. NOTE: it is safe to call this many times (i.e.,\nthe temp dir will only be created once). No effort is made to clean-up\nthe temp dir, and it is up to the caller to destroy it if desired.\n\nExample:\n\n```javascript\n// Default /tmp dir\nsh.tempDir(function(err, tmp) {\n  if(err) throw err;\n  // tmp is now '/tmp' by default, and /tmp exists\n});\n\n// Specify a tmp dir path\nsh.env.TMP = '/temporary'\nsh.tempDir(function(err, tmp) {\n  if(err) throw err;\n  // tmp is now '/temporary', and /temporary exists\n});\n```\n\n#### sh.mkdirp(path, callback)<a name=\"mkdirp\"></a>\n\nRecursively creates the directory at the provided path. If the\ndirectory already exists, no error is returned. All parents must\nbe valid directories (not files).\n\nExample:\n\n```javascript\n// Default empty filesystem\nsh.mkdirp('/test/mkdirp', function(err) {\n  if(err) throw err;\n  // the root '/' now contains a directory 'test' containing the directory 'mkdirp'\n});\n```\n","maintainers":[{"name":"modeswitch","email":"ack+npm@modeswitch.org"}],"time":{"modified":"2015-07-21T18:40:38.187Z","created":"2013-11-30T02:36:23.444Z","0.0.1":"2013-11-30T02:36:42.441Z","0.0.2":"2013-12-03T01:38:21.210Z","0.0.3":"2013-12-11T18:00:15.059Z","0.0.5":"2014-02-21T18:47:17.915Z","0.0.6":"2014-03-08T21:12:15.027Z","0.0.7":"2014-05-27T18:51:22.909Z","0.0.8":"2014-05-27T19:02:40.661Z","0.0.9":"2014-05-28T20:04:45.137Z","0.0.10":"2014-06-09T14:46:28.784Z","0.0.11":"2014-06-10T18:58:27.475Z","0.0.12":"2014-06-23T18:37:03.875Z","0.0.13":"2014-06-25T17:59:37.431Z","0.0.14":"2014-07-14T18:32:12.432Z","0.0.15":"2014-07-14T20:00:42.344Z","0.0.16":"2014-07-15T13:25:38.902Z","0.0.17":"2014-07-15T17:21:08.204Z","0.0.19":"2014-07-16T21:15:13.795Z","0.0.20":"2014-07-21T19:27:49.465Z","0.0.21":"2014-07-29T00:02:00.191Z","0.0.22":"2014-08-17T05:54:58.176Z","0.0.23":"2014-08-18T15:33:14.580Z","0.0.24":"2014-08-18T18:44:52.713Z","0.0.25":"2014-08-20T18:47:36.263Z","0.0.26":"2014-08-20T20:02:31.973Z","0.0.27":"2014-08-22T16:37:38.320Z","0.0.28":"2014-09-09T19:06:11.990Z","0.0.29":"2014-09-19T16:31:03.411Z","0.0.33":"2014-09-30T20:17:29.200Z","0.0.35":"2014-10-24T12:05:10.547Z","0.0.36":"2014-12-02T18:46:21.370Z","0.0.37":"2014-12-17T07:36:47.854Z","0.0.41":"2014-12-17T07:54:26.336Z","0.0.44":"2015-07-21T18:40:38.187Z"},"author":{"name":"Alan K","email":"ack@modeswitch.org","url":"http://blog.modeswitch.org"},"repository":{"type":"git","url":"git+https://github.com/filerjs/filer.git"},"readmeFilename":"README.md","homepage":"http://filerjs.github.io/filer","keywords":["fs","node","file","system","browser","indexeddb","idb","websql"],"contributors":[{"name":"Alan K","email":"ack@modeswitch.org","url":"blog.modeswitch.org"},{"name":"David Humphrey","email":"david.humphrey@senecacollege.ca","url":"@humphd"},{"name":"Abir Viqar","email":"abiviq@hushmail.com"},{"name":"Barry Tulchinsky","email":"barry.tulchinsky@gmail.com","url":"@btulchinsky"},{"name":"Kieran Sedgwick","email":"kieran.sedgwick@gmail.com","url":"@sedge"},{"name":"Yoav Gurevich","email":"ygurevich@ymail.com"},{"name":"Gideon Thomas","email":"r.gideonthomas@gmail.com"}],"bugs":{"url":"https://github.com/filerjs/filer/issues"},"license":"BSD","users":{"funroll":true,"modeswitch":true},"_attachments":{}}