{"_id":"promised-temp","_rev":"2-c42e4a703ae73ab62f2dd00cbf333733","name":"promised-temp","description":"Tool for making temporary files asynchronously that return Promises. Wraps node-temp module with Promises.","dist-tags":{"latest":"0.1.0"},"versions":{"0.1.0":{"name":"promised-temp","description":"Tool for making temporary files asynchronously that return Promises. Wraps node-temp module with Promises.","author":{"name":"Mika Turunen","email":"mika.turunen@ymail.com"},"version":"0.1.0","license":"MIT","directories":{"lib":"lib"},"engines":["node >=0.8.0"],"main":"./lib/promised-temp","dependencies":{"temp":"^0.8.1","q":"^1.0.1","debug":"^2.1.0","mkdirp":"^0.5.0"},"tags":["tmp","temporary","promises"],"keywords":["tmp","promises","temp","temporary"],"scripts":{"test":"mocha tests/promised-temp.test.js"},"repository":{"type":"git","url":"git://github.com/mikaturunen/promised-temp.git"},"devDependencies":{"chai":"^1.9.2","mocha":"^2.0.1","sinon":"^1.11.1"},"bugs":{"url":"https://github.com/mikaturunen/promised-temp/issues"},"homepage":"https://github.com/mikaturunen/promised-temp","_id":"promised-temp@0.1.0","dist":{"shasum":"5f8a704ccdf5f2ac23996fcafe2b301bc2a8d0eb","tarball":"http://registry.npmjs.org/promised-temp/-/promised-temp-0.1.0.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"mikaturunen","email":"mika.turunen@ymail.com"},"maintainers":[{"name":"mikaturunen","email":"mika.turunen@ymail.com"}]}},"readme":"promised-temp\r\n=============\r\n\r\nTool for making temporary files asynchronously. Great when you need to stream files to harddrive temporarily. Promised-temp can be told to\r\nclean the created temporary (random) files or directories when needed.\r\n\r\nInternally uses the excellent node-temp library (https://github.com/bruce/node-temp). Unfortunately as functional as the original library was, it was lacking in modern functionality and so promised-temp came about. The module fully uses all the async functions of the temp module and does not even reveal the sync methods. Only async ones with promises. All the methods that are async return a promise for the programmer to wait for resolving or rejecting.\r\n\r\n## Installing\r\nYou can get promised-temp from NPM by writing:\r\n\r\n    npm install promised-temp --save\r\n\r\nAutomatically fethces the latest version, saves it to your package.json ans it's ready for use.\r\n\r\n## How to use\r\nThere is a minor key difference to the original node-temp and that is that none of the functions throw errors, they all return a promise and they either resolve on success or reject on error and the node-temp throw error is rejected out for the user to handle. Also the .open call creates a new directory if the affixes.dir is used. Commonly the idea with the node-temp was the first create the dir with mkdir and then call the open with affixes.dir but here you can just provide the affixes.dir for the .open function and if the dir is not present, it will be creted as it's opened.\r\n\r\n### Affixes parameter\r\nAll the functions that take in parameters take in the affixes as the first parameter. Affixes can be either a string (which is internally resolved to affixes.prefix) or an object containing the following properties: prefix, suffix and dir.\r\n\r\n    Example type:\r\n    affixes {\r\n        prefix: string;\r\n        suffix: string;\r\n        dir: string;\r\n    };\r\n\r\n    Example use:\r\n    var affixes = {\r\n        prefix: \"foobar\",\r\n        suffix: \".zip\",\r\n        dir: \"tempfoo\"\r\n    };\r\n\r\nThis generates a temporary file in the system common tmp directory with added temp directory name containing tempfoo word and a a file with name that contains foobar as the prefix and .zip as the suffix. For example a file name can be something along these lines: '/tmp/tempfoo-fase223/114103-7648-kpv2q1.zip'. This is extremely useful when creating random files on hdd that will be deleted either manually after they've been processed or automatically by the system.\r\n\r\n## .open(affixes), returns: Q.Promise\r\n\r\n    // I generally prefer the maintain a strict rule of order by following with the .catch, .done blocks to make sure \r\n    // that none of the actual expection get eaten by accident.\r\n    \r\n    var temp = require(\"promised-temp\").track();\r\n    temp\r\n        .open(\"/tmp/foo/bar\")\r\n        // use case with affixes: .open({ prefix: \"/tmp/foo/bar\", prefix: \".zip\", dir: \"somewhere\" })\r\n        .then(function(result) {\r\n            // do something with the result\r\n        })\r\n        .catch(function(error) {\r\n            // do something with the error case\r\n        })\r\n        .done();\r\n\r\n## .mkdir(affixes), returns: Q.Promise\r\nCreates a temporary directory with the provided prefix.\r\n\r\n    var temp = require(\"promised-temp\").track();\r\n    temp\r\n        .mkdir(\"/tmp/foo/bar\")\r\n        .then(function(result) {\r\n            // do something with the result\r\n        })\r\n        .catch(function(error) {\r\n            // do something with the error case\r\n        })\r\n        .done();\r\n\r\n## .track(Boolean), returns: Q.Promise\r\nStarts tracking for created tmp directories and files. When files are tracked, they can be removed by the .cleanup call or automatically\r\non exit.\r\n\r\n    var temp = require(\"promised-temp\");\r\n    temp.track();\r\n    // commonly it's chained with the actual temp lib call as follows. require(\"promised-temp\").track();\r\n\r\n## .cleanup(), returns: Q.Promise\r\nManually performs a cleanup of created directories and files. Please note that if .track has not been called, an error will be returned with the information explaining that tracking was not on (does not know what files to remove as the created temp files/directories are randomly generated).\r\n\r\n    var temp = require(\"promised-temp\");\r\n    temp.track();\r\n    temp\r\n        .cleanup()\r\n        .then(function(result) {\r\n            // do something with the result\r\n        })\r\n        .catch(function(error) {\r\n            // do something with the error case\r\n        })\r\n        .done();\r\n\r\n## Pull Requests\r\nPlease, do submit PR's as the need rises and use the issue tracker for bugs and issues in the library. Thanks!","maintainers":[{"name":"mikaturunen","email":"mika.turunen@ymail.com"}],"time":{"modified":"2014-11-08T10:03:32.844Z","created":"2014-11-08T10:03:32.844Z","0.1.0":"2014-11-08T10:03:32.844Z"},"homepage":"https://github.com/mikaturunen/promised-temp","keywords":["tmp","promises","temp","temporary"],"repository":{"type":"git","url":"git://github.com/mikaturunen/promised-temp.git"},"author":{"name":"Mika Turunen","email":"mika.turunen@ymail.com"},"bugs":{"url":"https://github.com/mikaturunen/promised-temp/issues"},"license":"MIT","readmeFilename":"README.md","_attachments":{}}