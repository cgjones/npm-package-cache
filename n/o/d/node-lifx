{"_id":"node-lifx","_rev":"10-1120beef49176de721b573c3ddee4ed5","name":"node-lifx","description":"Node.js implementation of the LIFX protocol","dist-tags":{"latest":"0.4.0"},"versions":{"0.1.0":{"name":"node-lifx","description":"Node.js implementation of the LIFX protocol","version":"0.1.0","author":{"name":"Marius Rumpf","email":"marius@mariusrumpf.de"},"bugs":{"url":"https://github.com/MariusRumpf/node-lifx/issues"},"dependencies":{"eventemitter3":"^1.1.0","lodash":"^3.8.0","ref":"^1.0.2"},"devDependencies":{"babel":"^5.2.17","chai":"^3.0.0","eslint":"^0.24.0","mocha":"^2.2.4"},"directories":{"test":"test"},"homepage":"https://github.com/MariusRumpf/node-lifx#readme","keywords":["bulb","lifx","light","lightbulb"],"license":"MIT","main":"./lib/lifx","optionalDependencies":{},"repository":{"type":"git","url":"git+https://github.com/MariusRumpf/node-lifx.git"},"scripts":{"lint":"eslint lib/ test/","pretest":"npm run lint","test":"mocha --growl --reporter spec --ui tdd --require babelhook --recursive test/unit/"},"gitHead":"3506f07596eaae13f19ae3d3349444f448411591","_id":"node-lifx@0.1.0","_shasum":"510e2c2206566a652c9a6674d91cb0e50dcdfec5","_from":".","_npmVersion":"2.12.1","_nodeVersion":"2.3.4","_npmUser":{"name":"mariusrumpf","email":"marius@mariusrumpf.de"},"dist":{"shasum":"510e2c2206566a652c9a6674d91cb0e50dcdfec5","tarball":"http://registry.npmjs.org/node-lifx/-/node-lifx-0.1.0.tgz"},"maintainers":[{"name":"mariusrumpf","email":"marius@mariusrumpf.de"}]},"0.1.1":{"name":"node-lifx","description":"Node.js implementation of the LIFX protocol","version":"0.1.1","author":{"name":"Marius Rumpf","email":"marius@mariusrumpf.de"},"bugs":{"url":"https://github.com/MariusRumpf/node-lifx/issues"},"dependencies":{"eventemitter3":"^1.1.0","lodash":"^3.8.0","ref":"^1.0.2"},"devDependencies":{"babel":"^5.2.17","chai":"^3.0.0","eslint":"^0.24.0","mocha":"^2.2.4"},"directories":{"test":"test"},"homepage":"https://github.com/MariusRumpf/node-lifx#readme","keywords":["bulb","lifx","light","lightbulb"],"license":"MIT","main":"./lib/lifx","optionalDependencies":{},"repository":{"type":"git","url":"git+https://github.com/MariusRumpf/node-lifx.git"},"scripts":{"lint":"eslint lib/ test/","pretest":"npm run lint","test":"mocha --growl --reporter spec --ui tdd --require babelhook --recursive test/unit/"},"gitHead":"b8ba91117b558c9abe9fd5a71670a909a0d7a326","_id":"node-lifx@0.1.1","_shasum":"d9edba347eb263807900440275eeb59d40bb3614","_from":".","_npmVersion":"2.12.1","_nodeVersion":"2.3.4","_npmUser":{"name":"mariusrumpf","email":"marius@mariusrumpf.de"},"dist":{"shasum":"d9edba347eb263807900440275eeb59d40bb3614","tarball":"http://registry.npmjs.org/node-lifx/-/node-lifx-0.1.1.tgz"},"maintainers":[{"name":"mariusrumpf","email":"marius@mariusrumpf.de"}]},"0.2.0":{"name":"node-lifx","description":"Node.js implementation of the LIFX protocol","version":"0.2.0","author":{"name":"Marius Rumpf","email":"marius@mariusrumpf.de"},"bugs":{"url":"https://github.com/MariusRumpf/node-lifx/issues"},"dependencies":{"eventemitter3":"^1.1.0","lodash":"^3.8.0"},"devDependencies":{"babel":"^5.2.17","chai":"^3.0.0","eslint":"^1.3.0","mocha":"^2.2.4","sinon":"^1.16.1"},"directories":{"test":"test","lib":"lib","example":"example"},"homepage":"https://github.com/MariusRumpf/node-lifx#readme","keywords":["bulb","lifx","light","lightbulb"],"license":"MIT","main":"./lib/lifx","optionalDependencies":{},"repository":{"type":"git","url":"git+https://github.com/MariusRumpf/node-lifx.git"},"scripts":{"lint":"eslint lib/ test/ example/ cli.js","pretest":"npm run lint","test":"mocha --growl --reporter spec --ui tdd --require babelhook --recursive test/unit/"},"gitHead":"c2f2925ed1807eed3c93926a5d7f5c95a44d7354","_id":"node-lifx@0.2.0","_shasum":"390583b251c80fa0dbf198c4b325517890fd86d1","_from":".","_npmVersion":"2.13.2","_nodeVersion":"2.5.0","_npmUser":{"name":"mariusrumpf","email":"marius@mariusrumpf.de"},"dist":{"shasum":"390583b251c80fa0dbf198c4b325517890fd86d1","tarball":"http://registry.npmjs.org/node-lifx/-/node-lifx-0.2.0.tgz"},"maintainers":[{"name":"mariusrumpf","email":"marius@mariusrumpf.de"}]},"0.2.1":{"name":"node-lifx","description":"Node.js implementation of the LIFX protocol","version":"0.2.1","author":{"name":"Marius Rumpf","email":"marius@mariusrumpf.de"},"bugs":{"url":"https://github.com/MariusRumpf/node-lifx/issues"},"dependencies":{"eventemitter3":"^1.1.0","lodash":"^3.8.0"},"devDependencies":{"babel":"^5.2.17","chai":"^3.0.0","eslint":"^1.3.0","mocha":"^2.2.4","sinon":"^1.16.1"},"directories":{"test":"test","lib":"lib","example":"example"},"homepage":"https://github.com/MariusRumpf/node-lifx#readme","keywords":["bulb","lifx","light","lightbulb"],"license":"MIT","main":"./lib/lifx","optionalDependencies":{},"repository":{"type":"git","url":"git+https://github.com/MariusRumpf/node-lifx.git"},"scripts":{"lint":"eslint lib/ test/ example/ cli.js","pretest":"npm run lint","test":"mocha --growl --reporter spec --ui tdd --require babelhook --recursive test/unit/"},"gitHead":"c56108bdda7a0ac52d319e4b0ecf33a8535fdc33","_id":"node-lifx@0.2.1","_shasum":"e97a9b07f696e0459dcc53856949b0458ddc8127","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.1","_npmUser":{"name":"mariusrumpf","email":"marius@mariusrumpf.de"},"dist":{"shasum":"e97a9b07f696e0459dcc53856949b0458ddc8127","tarball":"http://registry.npmjs.org/node-lifx/-/node-lifx-0.2.1.tgz"},"maintainers":[{"name":"mariusrumpf","email":"marius@mariusrumpf.de"}]},"0.3.0":{"name":"node-lifx","description":"Node.js implementation of the LIFX protocol","version":"0.3.0","author":{"name":"Marius Rumpf","email":"marius@mariusrumpf.de"},"bugs":{"url":"https://github.com/MariusRumpf/node-lifx/issues"},"dependencies":{"eventemitter3":"^1.1.0","lodash":"^3.8.0"},"devDependencies":{"babel":"^5.2.17","chai":"^3.0.0","codecov.io":"^0.1.6","eslint":"^1.3.0","istanbul":"^0.3.20","mocha":"^2.2.4","sinon":"^1.16.1"},"directories":{"test":"test","lib":"lib","example":"example"},"homepage":"https://github.com/MariusRumpf/node-lifx#readme","keywords":["bulb","lifx","light","lightbulb"],"license":"MIT","main":"./lib/lifx","optionalDependencies":{},"repository":{"type":"git","url":"git+https://github.com/MariusRumpf/node-lifx.git"},"scripts":{"lint":"eslint lib/ test/ example/ cli.js","pretest":"npm run lint","test":"istanbul cover -root lib/ node_modules/mocha/bin/_mocha -- -u tdd -r babelhook --recursive test/unit/","report-coverage":"cat ./coverage/coverage.json | node_modules/codecov.io/bin/codecov.io.js"},"gitHead":"e949b31ae3151d3edb6db65528e7b991a399fad3","_id":"node-lifx@0.3.0","_shasum":"d46cd3aab0015f72ca39f36163c6d0a0cf156b40","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.1","_npmUser":{"name":"mariusrumpf","email":"marius@mariusrumpf.de"},"dist":{"shasum":"d46cd3aab0015f72ca39f36163c6d0a0cf156b40","tarball":"http://registry.npmjs.org/node-lifx/-/node-lifx-0.3.0.tgz"},"maintainers":[{"name":"mariusrumpf","email":"marius@mariusrumpf.de"}]},"0.4.0":{"name":"node-lifx","description":"Node.js implementation of the LIFX protocol","version":"0.4.0","author":{"name":"Marius Rumpf","email":"marius@mariusrumpf.de"},"bugs":{"url":"https://github.com/MariusRumpf/node-lifx/issues"},"dependencies":{"eventemitter3":"^1.1.0","lodash":"^3.8.0"},"devDependencies":{"babel-core":"^6.0.15","babel-preset-es2015":"^6.0.15","chai":"^3.0.0","codecov.io":"^0.1.6","eslint":"^1.3.0","istanbul":"^0.4.0","lolex":"^1.4.0","mocha":"^2.2.4"},"directories":{"test":"test","lib":"lib","example":"example"},"homepage":"https://github.com/MariusRumpf/node-lifx#readme","keywords":["bulb","lifx","light","lightbulb"],"license":"MIT","main":"./lib/lifx","optionalDependencies":{},"repository":{"type":"git","url":"git+https://github.com/MariusRumpf/node-lifx.git"},"scripts":{"lint":"eslint lib/ test/ example/ cli.js","pretest":"npm run lint","test":"istanbul cover -root lib/ node_modules/mocha/bin/_mocha -- -u tdd -r babelhook --recursive test/unit/","report-coverage":"cat ./coverage/coverage.json | node_modules/codecov.io/bin/codecov.io.js"},"gitHead":"3555fc3f9f3568874bb05d29dccd71fe11ceb897","_id":"node-lifx@0.4.0","_shasum":"9e60fe97cef065c3c27bf57625f0d2e08c03b0ac","_from":".","_npmVersion":"3.3.12","_nodeVersion":"5.3.0","_npmUser":{"name":"mariusrumpf","email":"marius@mariusrumpf.de"},"dist":{"shasum":"9e60fe97cef065c3c27bf57625f0d2e08c03b0ac","tarball":"http://registry.npmjs.org/node-lifx/-/node-lifx-0.4.0.tgz"},"maintainers":[{"name":"mariusrumpf","email":"marius@mariusrumpf.de"}]}},"readme":"# LIFX Node.js Library\n\n[![NPM Version](https://img.shields.io/npm/v/node-lifx.svg)](https://www.npmjs.com/package/node-lifx)\n[![Build Status](https://img.shields.io/travis/MariusRumpf/node-lifx/master.svg)](https://travis-ci.org/MariusRumpf/node-lifx)\n[![Build status](https://img.shields.io/appveyor/ci/MariusRumpf/node-lifx/master.svg)](https://ci.appveyor.com/project/MariusRumpf/node-lifx)\n[![Dependency Status](https://img.shields.io/versioneye/d/nodejs/node-lifx.svg)](https://www.versioneye.com/nodejs/node-lifx/)\n[![Inline docs](http://inch-ci.org/github/mariusrumpf/node-lifx.svg?branch=master)](http://inch-ci.org/github/mariusrumpf/node-lifx)\n[![codecov.io](https://img.shields.io/codecov/c/github/MariusRumpf/node-lifx/master.svg)](http://codecov.io/github/MariusRumpf/node-lifx?branch=master)\n\n\nA Node.js implementation of the [LIFX protocol](https://github.com/LIFX/lifx-protocol-docs). Developed to work with a minimum firmware version of 2.0.\n\nThis library is not, in any way, affiliated or related to LiFi Labs, Inc.. Use it at your own risk.\n\n## Installation\n\n```sh\n$ npm install node-lifx --save\n```\n\n## Compatibility\n\nNode.js 0.12+ and io.js are tested and supported on Mac, Linux and Windows.\n\n## Usage\nThe file `cli.js` contains a working example.\n\n### Client\nThe library uses a client for network communication. This client handles communication with all lights in the network.\n```js\nvar LifxClient = require('node-lifx').Client;\nvar client = new LifxClient();\n\nclient.init();\n```\nThe `Client` object is an EventEmitter and emmits events whenever any changes occur. This can be a new light discovery, a light sending a message or similar.  \nThe client starts discovery of lights right after it is initialized with the `init` method. If a new light is found the client emmits a `light-new` event. This event contains the light as an object on which methods can be called then:\n\n```js\nvar LifxClient = require('node-lifx').Client;\nvar client = new LifxClient();\n\nclient.on('light-new', function(light) {\n  // Change light state here\n});\n\nclient.init();\n```\n\n### Changing light state\nThe states of a light can be changed with different methods:\n\n#### `light.on([duration], [callback])`\nThis turns a light on.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`duration` | int | 0 | Turning on will be faded over the time (in milliseconds).\n`callback` | function | null | `function(error) {}` Called after the command has reached the light or after `client.resendMaxTimes` with `client.resendPacketDelay` in case it has not. `error` is `null` in case of success and given if the sending has failed.\n_Note: Using callback multiplies network load for this command by two or more times._\n\nUsage examples:\n```js\nlight.on(); // Turns the light off instantly\nlight.on(2000); // Fading the light off over two seconds\n```\n\n#### `light.off([duration], [callback])`\nThis turns a light off.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`duration` | int | 0 | Turning off will be faded over the time (in milliseconds).\n`callback` | function | null | `function(error) {}` Called after the command has reached the light or after `client.resendMaxTimes` with `client.resendPacketDelay` in case it has not. `error` is `null` in case of success and given if the sending has failed.\n_Note: Using callback multiplies network load for this command by two or more times._\n\nUsage examples:\n```js\nlight.off(); // Turns the light off instantly\nlight.off(2000); // Fading the light off over two seconds\n```\n\n#### `light.color(hue, saturation, brightness, [kelvin], [duration], [callback])`\nChanges the color off a light.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`hue` | int | | Between 0 and 360, representing the color hue in degree which changes the color.\n`saturation` | int | | Between 0 and 100, representing the color intensity from 0% to 100%.\n`brightness` | int | | Between 0 and 100, representing the light brightness from 0% to 100%.\n`kelvin` | int | 3500 | Between 2500 and 9000, representing the color temperature.\n`duration` | int | 0 | Fade the color to the new value over time (in milliseconds).\n`callback` | function | null | `function(error) {}` Called after the command has reached the light or after `client.resendMaxTimes` with `client.resendPacketDelay` in case it has not. `error` is `null` in case of success and given if the sending has failed.\n_Note: Using callback multiplies network load for this command by two or more times._\n\nUsage examples:\n```js\nlight.color(0, 100, 50); // Set to red at 50% brightness\nlight.color(50, 50, 80, 3500, 2000); // Set to a light green at 80% brightness over next two seconds\n```\n\n### Requesting light state and info\nInfos of the state and spec of the light can be requested with the following methods:\n\n#### `light.getState(callback)`\nRequests general info from a light, this includes color, label and power state. This function is asynchronous.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`callback` | function | | `function(error, data) {}`\n\nExample result:\n```js\nnull,\n{\n  color: { hue: 120, saturation: 0, brightness: 100, kelvin: 8994 },\n  power: 0,\n  label: 'Kitchen'\n}\n```\n\n#### `light.getPower(callback)`\nRequests current power state (on or off). This function is asynchronous.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`callback` | function | | `function(error, data) {}`\n\nExample result:\n```js\nnull,\n0 // off\n```\n\n#### `light.getFirmwareVersion(callback)`\nRequests the firmware version from a light (minor and major version). This function is asynchronous.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`callback` | function | | `function(error, data) {}`\n\nExample result:\n```js\nnull,\n{\n  majorVersion: 2,\n  minorVersion: 1\n}\n```\n\n#### `light.getHardwareVersion(callback)`\nRequests the hardware version from a light (vendor, product and version). This function is asynchronous.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`callback` | function | | `function(error, data) {}`\n\nExample result:\n```js\nnull,\n{\n  vendorId: 1,\n  vendorName: 'LIFX',\n  productId: 1,\n  productName: 'Original 1000',\n  version: 6\n}\n```\n\n#### `light.getFirmwareInfo(callback)`\nRequests info from the micro controller unit of a light (signal, tx and rx). This function is asynchronous.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`callback` | function | | `function(error, data) {}`\n\nExample result:\n```js\nnull,\n{\n  signal: 0,\n  tx: 0,\n  rx: 0\n}\n```\n\n#### `light.getWifiInfo(callback)`\nRequests wifi info from a light (signal, tx and rx). This function is asynchronous.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`callback` | function | | `function(error, data) {}`\n\nExample result:\n```js\nnull,\n{\n  signal: 0.000009999999747378752,\n  tx: 16584,\n  rx: 12580\n}\n```\n\n#### `light.getWifiVersion(callback)`\nRequests the wifi firmware version from the light (minor and major version). This function is asynchronous.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`callback` | function | | `function(error, data) {}`\n\nExample result:\n```js\nnull,\n{\n  majorVersion: 2,\n  minorVersion: 1\n}\n```\n\n#### `light.getAmbientLight(callback)`\nRequests the ambient light value in flux from the light. This function is asynchronous.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`callback` | function | | `function(error, data) {}`\n\n\nExample result:\n```js\nnull,\n10\n```\n\n### Labels\nLabels of lights can be requested and set using the following methods:\n\n#### `light.getLabel(callback, [cache])`\nRequests the label of a light. This function is asynchronous.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`callback` | function | | `function(error, data) {}`\n`cache`    | boolean  | false | Use the last known value for the label and and do not request from the light again\n\nExample result:\n```js\nnull,\n'Kitchen'\n```\n\n#### `light.setLabel(label, [callback])`\nSets a new label for a light.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`label` | string | | New Label with 32 bit size maximum (which is a length of 32 with non unicode chars).\n`callback` | function | null | `function(error) {}` Called after the command has reached the light or after `client.resendMaxTimes` with `client.resendPacketDelay` in case it has not. `error` is `null` in case of success and given if the sending has failed.\n_Note: Using callback multiplies network load for this command by two or more times._\n\n\nUsage examples:\n```js\nlight.setLabel('Bedroom Light');\nlight.setLabel('Kitchen Light 4', function(err) {\n  if (err) { throw err; }\n  console.log('New light label has been set');\n});\n```\n\n### Get a light\n#### `client.light(identifier)`\nFind a light in the list off all lights by ip, label or id.\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`identifier` | string | | Light label (case sensitive) `client.light('Kitchen')`, the ip address `client.light('192.168.2.102')` or the light id `client.light('0123456789012')`\n\nReturns a light object that can then be used to call methods on it. For example `client.light('192.168.2.102').on()`.\n\n### Get all lights\n\n#### `client.lights([filter])`\nGet a list of all known lights\n\nOption | Type | Default | Description\n------ | ---- | ------- | -----------\n`filter` | string | null | Filter list of lights to return only active (`null` or `'on'`), inactive (`'off'`) or all (`''`)\n\n### Client events\nThe following events might be thrown by the client.\n\n#### `light-new`\nThis event is thrown when there is a new light discovery that has not been seen at runtime before. This event is provided with the new light object.  \n`client.on('light-new', function(light) {});`\n\n#### `light-offline`\nThis event is thrown when a light hasn't been discovered for a time. The light given is no longer expected to be reachable.  \n`client.on('light-offline', function(light) {});`\n\n#### `light-online`\nThis event is thrown when a light is discovered again after being offline.  \n`client.on('light-online', function(light) {});`\n\n### Start / Stop discovery\nThe discovery for each client can be started and stopped at runtime using these commands:\n\n#### `client.startDiscovery()`\nStarts the discovery process.\n\n#### `client.stopDiscovery()`\nStops the discovery process.\n\n### Client settings\nFor the initialization of the client different settings can be provided. This is an example with the default options:\n\n```js\nvar LifxClient = require('node-lifx').Client;\nvar client = new LifxClient();\n\n// ...\n\nclient.init({\n  lightOfflineTolerance: 3, // A light is offline if not seen for the given amount of discoveries\n  messageHandlerTimeout: 45000, // in ms, if not answer in time an error is provided to get methods\n  startDiscovery: true, // start discovery after initialization\n  resendPacketDelay: 150, // delay between packages if light did not receive a packet (for setting methods with callback)\n  resendMaxTimes: 3, // resend packages x times if light did not receive a packet (for setting methods with callback)\n  debug: false // logs all messages in console if turned on\n});\n```\n","maintainers":[{"name":"mariusrumpf","email":"marius@mariusrumpf.de"}],"time":{"modified":"2015-12-21T12:42:41.174Z","created":"2015-07-19T12:30:16.359Z","0.1.0":"2015-07-19T12:30:16.359Z","0.1.1":"2015-07-20T18:23:08.831Z","0.2.0":"2015-09-20T13:22:37.825Z","0.2.1":"2015-10-16T20:44:36.852Z","0.3.0":"2015-10-24T13:37:59.397Z","0.4.0":"2015-12-21T12:42:41.174Z"},"homepage":"https://github.com/MariusRumpf/node-lifx#readme","keywords":["bulb","lifx","light","lightbulb"],"repository":{"type":"git","url":"git+https://github.com/MariusRumpf/node-lifx.git"},"author":{"name":"Marius Rumpf","email":"marius@mariusrumpf.de"},"bugs":{"url":"https://github.com/MariusRumpf/node-lifx/issues"},"license":"MIT","readmeFilename":"README.md","users":{"ristomatti":true,"nelix":true,"mariusrumpf":true,"nauwep":true}}